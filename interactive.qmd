---
title: "Short introduction to interactive visualisation in R"
author: "Laurent Gatto"
format:
  html:
    toc: true
    toc-depth: 2
    code-fold: false
---

```{=html}
<style>
pre.output-code {
  background-color: #f8f9fa;
}
</style>
```

This very short introduction to interactive visualisation in R will teach you:

-   How to use `plotly` to create interactive visualisations from a `ggplot2` figure.
-   How to develop a simple interactive `shiny` application.

More specifically, for the `shiny` application, you will learn about
the two components of an application, namely the user interface and
server, and how the reactive programming paradigm enables
communication between them.

## Interactive plots with `plotly`

The [`plotly`](https://github.com/plotly/plotly.R) package can be used
for creating interactive web graphics open source JavaScript graphing
library [plotly.js](https://github.com/plotly/plotly.js) and its R
[binding](https://plotly.com/r/).

Install the package with

```{r}
#| label: install_plotly
#| eval: false
install.packages("plotly")
```

```{r}
#| label: plotly
#| message: false
data(iris)
library("plotly")
p <- ggplot(data = iris,
            aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +
    geom_point()
ggplotly(p)
```

See the [plotly for R](https://plotly-book.cpsievert.me/) book for
more details and to learn how to build plotly plots from scratch in R.

## Interactive apps with `shiny`

For more details about `shiny`, visit the main `shiny`
[website](https://shiny.rstudio.com/) or consult the [Mastering
Shiny](https://mastering-shiny.org/) book.

The [`shiny`](https://shiny.rstudio.com/) package desciption says that
it

> Makes it incredibly easy to build interactive web applications with
> R.


```{r}
#| label: install_shiny
#| eval: false
install.packages("shiny")
```

As opposed to `plotly` above, when using
[`shiny`](https://shiny.rstudio.com/), one tends to aim for more
complete, long-lasting applications, rather than transient
visualisations.

A [`shiny`](https://shiny.rstudio.com/) application is composed of a
*ui* (user interface) and a *server* that exchange information using a
programming paradigm called *reactive programming*: changes performed
by the user to the *ui* trigger a reaction by the *server* and the
output is updated accordingly.

-   In the **ui**: define the components of the user interface (such
    as page layout, page title, input options and outputs), i.e what
    the user will see and interact with.

-   In the **server**: defines the computations in the R backend.

-   The **reactive** programming is implemented through *reactive*
    functions, which are functions that are only called when their
    respective inputs are changed.

-   An application is run with the `shiny::runApp()` function, that
    takes the directory containing the *ui* and *server* as input.

Let's build a simple example from scratch, step by step. This app,
shown below, uses the `faithful` data, describing the wainting time
between eruptions and the duration of the reuption for the Old
Faithful geyser in Yellowstone National Park, Wyoming, USA.

```{r}
#| label: faithfuldata
head(faithful)
```

It shows the distribution of waiting times along a histogram (produced
by the `hist` function) and provides a slider to adjust the number of
bins (the `breaks` argument to `hist`).

```{r}
#| label: shinyapp1
#| echo: false
knitr::include_app("https://lgatto.shinyapps.io/shiny-app1/",
                   height = "650px")
```

The app can also be opened at
[https://lgatto.shinyapps.io/shiny-app1](https://lgatto.shinyapps.io/shiny-app1).

### Creation of our fist shiny app

1.  Create a directory that will contain the app, such as for example `"shinyapp"`.
2.  In this directory, create the *ui* and *server* files, named `ui.R` and `server.R`.
3.  In the `ui.R` file, let's defines a (fluid) page containing
    -   a title panel with a page title;
    -   a layout containing a sidebar and a main panel

```{r}
#| eval: false
#| file: src/shiny-app00/ui.R
```

4.  In the `server.R` file, we define the `shinyServer` function that handles input and ouputs (none at this stage) and the R logic.

```{r}
#| eval: false
#| file: src/shiny-app00/server.R
```

5.  Let's now add some items to the *ui*: a text input widget in the sidebar and a field to hold the text ouput.

```{r}
#| eval: false
#| file: src/shiny-app01/ui.R
```

6.  In the `server.R` file, we add in the `shinyServer` function some
    R code defining how to manipulate the user-provided text and
    render it using a shiny `textOuput`.

```{r}
#| eval: false
#| file: src/shiny-app01/server.R
```

7.  Let's now add a plot in the main panel in `ui.R` and some code to draw a histogram in `server.R`:

```{r}
#| eval: false
#| file: src/shiny-app02/ui.R
```

```{r}
#| eval: false
#| file: src/shiny-app02/server.R
```

8.  We want to be able to control the number of breaks used to plot
    the histograms. We first add a `sliderInput` to the *ui* for the
    user to specify the number of bins, and then make use of that new
    input to parametrise the histogram.

```{r}
#| eval: false
#| file: src/shiny-app03/ui.R
```

```{r server03, comment = "", echo=FALSE}
#| eval: false
#| file: src/shiny-app03/server.R
```

9.  The next addition is to add a menu for the user to choose a set of
    predefined colours (that would be a `selectInput`) in the `ui.R`
    file and use that new input to parametrise the colour of the
    histogramme in the `server.R` file.

```{r}
#| eval: false
#| file: src/shiny-app04/ui.R
```

```{r}
#| eval: false
#| file: src/shiny-app04/server.R
```

10. The last addition that we want is to visualise the actual data in
    the main panel. We add a `dataTableOutput` in `ui.R` and generate
    that table in `server.R` using a `renderDataTable` rendering
    function.

```{r}
#| eval: false
#| file: src/shiny-app1/ui.R
```

```{r}
#| eval: false
#| file: src/shiny-app1/server.R
```


### Single-file app {.unnumbered}

Instead of defining the *ui* and *server* in their respective files,
they can be combined into list

```{r}
#| label: singlefileapp
#| eval: false
#| code-fold: false
ui <- fluidPage(...)
server <- function(input, output) { ... }
```

To be run as

```{r}
#| eval: false
#| code-fold: false
shinyApp(ui = ui, server = server)
```

### Sharing `shiny` apps {.unnumbered}

-   Share the code file(s) and `runApp`.
-   `runUrl` will download and launch a Shiny application that is hosted at a downloadable URL.
-   `runGitHub` to run an application available on GitHub [^1]. 
-   [shinyapps](http://wwwshinyapps.io) hosts Shiny application.
-   Shiny server (in-house)

[^1]: You can for instance run this app with 
      `runGitHub("interactive-vis-intro", "lgatto", subdir = "/src/shiny-app1")`

## Session information

```{r}
sessionInfo()
```
